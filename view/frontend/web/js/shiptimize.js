/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 450:
/***/ (() => {

eval("\n;// CONCATENATED MODULE: ./js/shiptimize-utils.js\n/** \n * Singleton object we can use for platform independent stuff \n */\nclass ShiptimizeUtils {\n  constructor() {}\n\n  /** \n   * Inject Script into the page \n   * @param string src \n   */\n  injectExternalScript(src) {\n    let s = document.createElement(\"script\");\n    s.setAttribute(\"src\", src);\n    document.body.appendChild(s);\n  }\n\n  /** \n   * Inject a script string \n   */\n  injectScript(contents) {\n    let e = document.createElement(\"script\");\n    e.value = contents;\n    document.body.appendChild(e);\n  }\n\n  /** \n   * Removes all not numeric chars from the string \n   *\n   * @param string string - the input string \n   * @return the string without chars that are not numbers \n   */\n  removeNonNumeric(string) {\n    return string.replace(/\\D/g, '');\n  }\n\n  /** \n   * Check if the given url exists and is valid\n   * We use this to check if the carrier icon exists given \n   * a url path and the naming convention {carrier_id}.svg \n   * Make sure the correct protocol is appended to the url http != https \n   * \n   * @return true it the url exists and is valid \n   */\n  isUrlValid(url) {\n    var http = new XMLHttpRequest();\n    http.open('HEAD', url, false);\n    http.send();\n    return http.status == 200;\n  }\n\n  /** \n   * Open a new window with the provided URL \n   * @string url \n   * @return bool if the window was opened, false if popup blocker enabled \n   */\n  openNewWindow(url, options) {\n    let newWin = window.open(url, '_blank', options);\n    let blocked = !newWin || newWin.closed || typeof newWin.closed == 'undefined';\n    return !blocked;\n  }\n}\nlet utils = new ShiptimizeUtils();\n/* harmony default export */ const shiptimize_utils = (utils);\n;// CONCATENATED MODULE: ./js/shiptimize-magento.js\nclass ShiptmizeMagento {\n  constructor() {\n    this.bootstrap();\n    this.rate_carrier = {};\n    this.rate_requested = false;\n    this.pickupPoint = {};\n    this.currentMethod = null;\n  }\n\n  /**   \n   * If it's a multi step ajax checkout.. we don't try to understand  what convoluted logic the theme developers have going on, but just wait for the \n   * methods to be included \n   *\n   * Furthermore we are plugin into the footer to inject the map, but we can't guarantee it will be included in the outer body tag, so we need to do that after load. \n   * If there is a table rate present we need to ask the server if the selected method has pickup \n   */\n  bootstrap() {\n    //Not ideal, but also not horrendous wait for the element to exist \n    if (jQuery(\"input[type='radio']:checked\").length == 0) {\n      setTimeout(() => {\n        this.bootstrap();\n      }, 500);\n      return;\n    }\n\n    // jQuery(\"#maincontent\").bind(\"DOMSubtreeModified\",  () => {\n    //   this.addEvents();\n    // });\n\n    let map_wrapper = jQuery(\".shiptimize-pickup\");\n    jQuery(\"body\").append(map_wrapper);\n    this.addEvents();\n  }\n\n  /** \n   * Because it's possible for functions to modify the html structure \n   * and remove our events  \n   */\n  addEvents() {\n    this.addCheckoutButton();\n    jQuery(\"#maincontent\").on('change', \"input[type='radio']\", () => {\n      this.addCheckoutButton();\n    });\n\n    /**\n     * If the user clicks the row the method is changed \n     * but the change event is not triggered \n     */\n    jQuery(\"#maincontent\").on('click', \"tr\", () => {\n      this.addCheckoutButton();\n    });\n\n    /**\n     *  Shops may use any html structure, not necessarily a table to server \n     *  Shipping methods \n     *  The dom may be replaced on page load \n     */\n    jQuery(\"input[type='radio']\").each((idx, elem) => {\n      console.log(\"radio \", jQuery(elem).val().toLowerCase());\n      if (jQuery(elem).val().toLowerCase().indexOf('shiptimize') >= 0) {\n        jQuery(elem).parent().parent().on('click', () => {\n          console.log(\"clicked\", elem);\n          this.addCheckoutButton();\n        });\n      }\n    });\n  }\n  /** \n   * If the selected Shipping method allows the user to choose a pickup address we add a button \n   * We always refresh the address, because people can go back and change it and we have no way of knowing if that happened \n   * \n   * Layout options by order: \n   * if there is a label, insert after the label \n   * if there is a table, insert in the last td \n   * else insert after the selected radio \n   */\n  addCheckoutButton() {\n    const shippingMethod = this.getSelectedShipppingMethod();\n\n    /**\n     * we only call this function if it's a shiptimize method\n    if (this.currentMethod === shippingMethod) {\n      return;\n    }**/\n\n    this.currentMethod = shippingMethod;\n    this.pickupPoint = {};\n    if (!this.hasPickup(shippingMethod)) {\n      jQuery(\".shiptimize-choose-pickup\").remove();\n      return;\n    }\n    jQuery(\".shiptimize-choose-pickup\").remove();\n\n    /** \n     * This function is declared on our mage script\n     */\n    shiptimize_get_shipping_address();\n    let eSelectedMethod = jQuery(jQuery(\"input[type='radio']:checked\").get(0));\n    let parentRow = eSelectedMethod.parents(\"tr\");\n    let eLabel = eSelectedMethod.siblings('label');\n    let eShiptimizeButton = jQuery(\"<span class='shiptimize-choose-pickup' >\" + \"<button class='button btn btn-primary' type='button' onClick='shiptimize.getPickupLocations()'>\" + shiptmize_choose + '</button>' + \"<span class='shiptimize-pickup__description'></span>\" + \"</span>\");\n    if (eLabel.length > 0) {\n      eShiptimizeButton.insertAfter(eLabel);\n    } else if (parentRow.length > 0) {\n      let tds = parentRow.children(\"td\");\n      jQuery(tds.get(tds.length - 1)).append(eShiptimizeButton);\n    } else {\n      /** default to block layout **/\n      eShiptimizeButton.addClass('shiptimize-custom-layout');\n      eSelectedMethod.parent().parent().parent().append(eShiptimizeButton);\n    }\n  }\n\n  /**\n   * \n   */\n  hasPickup(mage_id) {\n    /** \n     * Shiptimize table rates adds sufix pickup if method provides pickup points \n     */\n    if (mage_id.match(/([\\d]+)_pickup/) != null) {\n      return true;\n    }\n    for (let x = 0; x < shiptimize_carriers.length; ++x) {\n      if (shiptimize_carriers[x].ClassName === mage_id && shiptimize_carriers[x].HasPickup) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** \n   * @return the id of the shiptimize carrier associated with this method \n   */\n  getShiptimizeId(mage_id) {\n    var carrier_id = mage_id.match(/([\\d]+)_pickup/);\n    if (carrier_id != null) {\n      return carrier_id[1];\n    }\n    for (let x = 0; x < shiptimize_carriers.length; ++x) {\n      if (shiptimize_carriers[x].ClassName === mage_id) {\n        return typeof shiptimize_carriers[x].Id == 'object' ? shiptimize_carriers[x].Id['0'] : shiptimize_carriers[x].Id;\n      }\n    }\n    return 0;\n  }\n  getSelectedShipppingMethod() {\n    const eSelectedMethod = jQuery(\"input[type='radio']:checked\");\n    if (eSelectedMethod.length == 0) {\n      return '';\n    }\n    var method = eSelectedMethod.val();\n    /** \n     * Mage repeats the method name \n     */\n    var parts = method.split('_');\n    return parts.length > 1 && parts[0] == parts[1] ? parts[0] : method;\n  }\n\n  /** \n   * We only include this script on checkout, so it's always true\n   */\n  isCheckout() {\n    return true;\n  }\n\n  /** \n   * Returns the shipping data as an object in the same format that the api receives \n   * We get the address parts server side here \n   * Some checkouts will modify the address in ways not saved to mage \n   */\n  getShippingData() {\n    shiptimize_get_shipping_address();\n    return {\n      \"Address\": {\n        \"Lat\": \"\",\n        \"Long\": \"\",\n        'Streetname1': shiptimize_address.Streetname1,\n        'Streetname2': shiptimize_address.Streetname2,\n        'HouseNumber': '',\n        'NumberExtension': '',\n        'PostalCode': shiptimize_address.PostalCode,\n        'City': shiptimize_address.City,\n        'Country': shiptimize_address.Country,\n        \"State\": shiptimize_address.State\n      },\n      \"CarrierId\": this.getShiptimizeId(this.getSelectedShipppingMethod()) //in prestashop we can get this server side \n    };\n  }\n\n  /** \n   * @param Pickup pickup - a pickupPoint as received from the api \n   */\n  setPickupPoint(pickup) {\n    this.pickupPoint = pickup;\n    let label = pickup.Information.Name ? pickup.Information.Name : pickup.Information.Address + \" \" + pickup.Information.ZipCode;\n\n    //  Not present in all checkout configurations \n    let eShipTo = jQuery(\".ship-to\");\n    if (eShipTo.length > 0) {\n      if (jQuery(\"#shiptolabel\").length == 0) {\n        eShipTo.append(\"<div id=\\\"shiptolabel\\\"></div>\");\n      }\n      jQuery(\"#shiptolabel\").html('<p><br/>' + shiptimize_selected_pickup + \" : \" + label + '</p>');\n    }\n    let data = {\n      'PointId': pickup.PointId,\n      'Label': label,\n      'Extendedinfo': pickup.Extendedinfo\n    };\n    console.log(data);\n    jQuery.getJSON(shiptimize_ajax_save_pickup, data, resp => {\n      console.log(resp);\n    });\n  }\n}\n;// CONCATENATED MODULE: ./js/shiptimize-gmaps.js\n\nclass ShiptimizeGmaps {\n  constructor(key) {\n    this.isScriptLoaded = false;\n    this.markers = [];\n    this.map = null;\n    this.pickupPoints = [];\n    this.key = key;\n\n    /** \n     * the root url for the icons it's different for every platform  \n     * make sure to include a trailing / \n     */\n    this.icon_folder = shiptimize_icon_folder;\n    this.icon_selected = shiptimize_icon_folder + 'selected.png';\n    this.icon_default = shiptimize_icon_folder + 'default.png';\n    this.current_icon = this.icon_default;\n  }\n\n  /** \n   * Checks if we have an icon for this carrier.\n   * If yes then change the carrier icon\n   * If not then use the default icon\n   * \n   * @param int carrier_id - the carrier id \n   */\n  setCarrierIcon(carrier_id) {\n    let carrier_icon_url = this.icon_folder + '' + carrier_id + '.png';\n    this.current_icon = shiptimize_utils.isUrlValid(carrier_icon_url) ? carrier_icon_url : this.icon_default;\n  }\n\n  /** \n   * if the script has not been loaded , load it \n   */\n  grantReady() {\n    if (!this.isScriptLoaded) {\n      this.loadScript();\n    }\n  }\n  loadScript() {\n    if (typeof google == 'undefined' || typeof google.maps == 'undefined') {\n      shiptimize_utils.injectExternalScript(\"https://maps.googleapis.com/maps/api/js?key=\" + this.key + \"&callback=shiptimize.loadMap\");\n    }\n    this.isScriptLoaded = true;\n  }\n\n  /** \n   * Load the map into the element \n   * This function needs the script to be loaded \n   */\n  loadMap() {\n    console.log(\"displaying map on container with \" + jQuery(\".shiptimize-pickup__map\").width() + \" \" + jQuery(\".shiptimize-pickup__map\").height(), jQuery(\".shiptimize-pickup__map\").get(0));\n    this.map = new google.maps.Map(jQuery(\".shiptimize-pickup__map\").get(0), {\n      center: {\n        lat: -34.397,\n        lng: 150.644\n      },\n      zoom: 16,\n      mapTypeControl: false\n    });\n  }\n\n  /** \n   * center the map \n   */\n  centerMap(lat, lng) {\n    this.map.setCenter(new google.maps.LatLng(lat, lng));\n  }\n\n  /** \n   * Extract the country code from a geocode result\n   * @param geocode - a google.maps.Geocoder result \n   * @return string alpha-2 code for the country name \n   */\n  getCountryCodeFromResult(geocode) {\n    if (typeof geocode.address_components == \"undefined\") {\n      return \"\";\n    }\n    let components = geocode.address_components;\n    for (let i = 0; i < components.length; ++i) {\n      let types = components[i].types;\n      for (let j = 0; j < types.length; ++j) {\n        if (types[j] == 'country') {\n          return components[i].short_name;\n        }\n      }\n    }\n  }\n\n  /**\n   *  \n   * @param shippingData, the address parts       \n   * @param f_callback , the function to call when all mighty google returns a result \n   */\n  geocode(shippingData, f_callback) {\n    if (typeof google == 'undefined') {\n      //script not loaded yet\n      setTimeout(() => {\n        this.geocode(shippingData, f_callback);\n      }, 200);\n      return;\n    }\n    let geocoder = new google.maps.Geocoder();\n    let me = this;\n    var address = shippingData.Address.Streetname1 + \" \" + shippingData.Address.Streetname2 + \" \" + shippingData.Address.postalCode + \" \" + shippingData.Address.City + \" \" + shippingData.Address.State + \" \" + shippingData.Address.Country;\n    console.log('geocoding ' + address);\n    geocoder.geocode({\n      'address': address\n    }, function (results, status) {\n      let geocode = {\n        iso2: '',\n        lat: '',\n        lng: ''\n      };\n      if (status == 'OK') {\n        geocode = results[0];\n      } else {\n        console.log('Geocode was not successful for the following reason: ' + status);\n        f_callback(geocode);\n        return;\n      }\n      let latlng = geocode.geometry.location;\n      geocode.iso2 = me.getCountryCodeFromResult(geocode);\n      geocode.lat = latlng.lat();\n      geocode.lng = latlng.lng();\n      f_callback(geocode);\n    });\n  }\n  clearMarkers() {\n    if (this.markers.length > 0) {\n      for (let i = 0; i < this.markers.length; ++i) {\n        this.markers[i].setMap(null);\n      }\n      this.markers = [];\n    }\n  }\n\n  /** \n   * Add the markers to map \n   * @param array pickupPoints - an array of pickupPoints\n   * @param callback - a function to call when the marker is clicked \n   */\n  addMarkers(pickupPoints, callback) {\n    this.pickupPoints = pickupPoints;\n    for (let x = 0; x < pickupPoints.length; ++x) {\n      this.markers[x] = this.getMarker(pickupPoints[x]);\n      //    we need to do this because the values for lat,lng we have are rounded, so they will not match the ones returned by google\n      pickupPoints[x].marker = this.markers[x];\n      this.markers[x].addListener('click', () => {\n        if (typeof callback != 'undefined') {\n          callback(x);\n        }\n      });\n    }\n    this.fitBounds();\n  }\n\n  /** \n   * Return a marker for the gmaps \n   */\n  getMarker(pickupPoint, callback) {\n    let marker = new google.maps.Marker({\n      position: new google.maps.LatLng(pickupPoint.Lat, pickupPoint.Long),\n      map: this.map,\n      icon: {\n        url: this.current_icon\n      }\n    });\n    return marker;\n  }\n  fitBounds() {\n    var bounds = new google.maps.LatLngBounds();\n    for (let x = 0; x < this.markers.length; ++x) {\n      bounds.extend(this.markers[x].getPosition());\n    }\n    this.map.fitBounds(bounds);\n  }\n\n  /**\n   * Reset all markers  \n   * Select the marker of index idx in map \n   * @param int idx - the index to select \n   */\n  selectMarkerByIdx(idx) {\n    for (let i = 0; i < this.markers.length; ++i) {\n      this.markers[i].setIcon(idx == i ? this.icon_selected : this.current_icon);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./js/shiptimize-open-map.js\n\nclass ShiptimizeOpenMap {\n  constructor() {\n    this.isScriptLoaded = false;\n    this.markers = [];\n    this.map = null;\n\n    /** \n     * the root url for the icons it's different for every platform  \n     * make sure to include a trailing / \n     */\n    this.icon_folder = shiptimize_icon_folder;\n  }\n\n  /** \n   *\n   * @param string imageUrl - full url to the icon \n   * @return L.icon object \n   */\n  createIcon(imageUrl) {\n    return L.icon({\n      iconUrl: imageUrl,\n      iconSize: [50, 50],\n      // size of the icon \n      iconAnchor: [25, 25],\n      // point of the icon which will correspond to marker's location \n      popupAnchor: [-25, -50] // point from which the popup should open relative to the iconAnchor\n    });\n  }\n\n  /** \n   * @param decimal lat \n   * @param decimal lng \n   */\n  centerMap(lat, lng) {\n    this.map.invalidateSize();\n    let latlng = L.latLng(lat, lng);\n  }\n\n  /** \n   * if the script has not been loaded , load it. \n   * We use this function because we only want to load the script when the user clicks the button \n   */\n  grantReady() {\n    if (!this.isScriptLoaded) {\n      this.loadScript();\n    }\n  }\n\n  /**\n   *  \n   * @param shippingData, the address parts       \n   * @param f_callback , the function to call when all mighty google returns a result \n   */\n  geocode(shippingData, f_callback) {\n    console.log(shippingData);\n    this.grantReady();\n    jQuery.getJSON(\"https://nominatim.openstreetmap.org/search?format=json&addressdetails=1\" + \"&city=\" + shippingData.Address.City + \"&country=\" + shippingData.Address.Country, {}, response => {\n      let geocode = {\n        'iso2': '',\n        'lat': '',\n        'lng': ''\n      };\n      if (response.length > 0) {\n        let location = response[0];\n        geocode.iso2 = location.address.country_code;\n        geocode.lat = location.lat;\n        geocode.lng = location.lon;\n      }\n      f_callback(geocode);\n      console.log(response);\n    });\n  }\n  loadScript() {\n    if (typeof L == 'undefined') {\n      shiptimize_utils.injectExternalScript(SHIPTIMIZE_LEAFLET_URL);\n    }\n    this.isScriptLoaded = true;\n    this.loadMap();\n    return;\n  }\n\n  /** \n   * Leaflet does not receive a callback so we wait here for the script to be loaded \n   */\n  loadMap() {\n    if (typeof L == 'undefined') {\n      setTimeout(() => {\n        this.loadMap();\n      }, 1500);\n      console.log(\"Map not loaded, settimeout \");\n      return;\n    }\n    this.icon_selected = this.createIcon(shiptimize_icon_folder + 'selected.png');\n    this.icon_default = this.createIcon(shiptimize_icon_folder + 'default.png');\n    this.current_icon = this.icon_default;\n    this.map = new L.map(jQuery(\".shiptimize-pickup__map\").get(0), {\n      \"zoom\": 16,\n      \"center\": [51.505, -0.09]\n    });\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      \"attribution\": '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n  clearMarkers() {\n    if (this.markers.length > 0) {\n      for (let i = 0; i < this.markers.length; ++i) {\n        this.map.removeLayer(this.markers[i]);\n      }\n    }\n    this.markers = [];\n  }\n\n  /** \n   * Add the markers to map \n   * @param array pickupPoints - an array of pickupPoints\n   */\n  addMarkers(pickupPoints, callback) {\n    this.pickupPoints = pickupPoints;\n    for (let x = 0; x < pickupPoints.length; ++x) {\n      this.markers[x] = this.getMarker(pickupPoints[x]);\n      //    we need to do this because the values for lat,lng we have are rounded, so they will not match the ones returned by google\n      this.pickupPoints[x].marker = this.markers[x];\n      this.markers[x].on('click', () => {\n        if (typeof callback == 'function') {\n          callback(x);\n        }\n      });\n    }\n    this.fitBounds();\n  }\n  resetMarker(marker) {\n    marker.setIcon(this.icon_default);\n  }\n  selectMarker(marker) {\n    marker.setIcon(this.icon_selected);\n  }\n\n  /** \n   * Adjust the zoom in the map to display all the markers \n   * There's a fit bounds that receives 2 corners, but calculating them is up to us. \n   * corners: top left, bottom right     \n   * then we center the map at the center of the square  \n   */\n  fitBounds() {\n    let bottomLeft = [this.pickupPoints[0].Lat, this.pickupPoints[0].Long];\n    let topRight = [this.pickupPoints[0].Lat, this.pickupPoints[0].Long];\n    for (let i = 0; i < this.pickupPoints.length; ++i) {\n      let lat = this.pickupPoints[i].Lat;\n      let lng = this.pickupPoints[i].Long;\n      if (lat < bottomLeft[0]) {\n        bottomLeft[0] = lat;\n      }\n      if (lat > topRight[0]) {\n        topRight[0] = lat;\n      }\n      if (lng > topRight[1]) {\n        topRight[1] = lng;\n      }\n      if (lng < bottomLeft[1]) {\n        bottomLeft[1] = lng;\n      }\n    }\n    let centerX = bottomLeft[0] + (topRight[0] - bottomLeft[0]) / 2;\n    let centerY = bottomLeft[1] + (topRight[1] - bottomLeft[1]) / 2;\n    this.map.panTo([centerX, centerY]);\n    this.map.fitBounds([bottomLeft, topRight]);\n  }\n\n  /** \n   * Return a marker for the openLayers \n   * IconAnchor: The coordinates of the \"tip\" of the icon (relative to its top left corner). \n   * The icon will be aligned so that this point is at the marker's geographical location. \n   * Centered by default if size is specified, also can be set in CSS with negative margins.\n   */\n  getMarker(pickupPoint) {\n    let marker = L.marker([pickupPoint.Lat, pickupPoint.Long], {\n      \"icon\": this.current_icon,\n      \"title\": pickupPoint.Information.Name + \"\\n\" + pickupPoint.Information.Address\n    });\n    marker.addTo(this.map);\n    return marker;\n  }\n\n  /** \n   * Checks if we have an icon for this carrier.\n   * If yes then change the carrier icon\n   * If not then use the default icon\n   * \n   * @param int carrier_id - the carrier id \n   */\n  setCarrierIcon(carrier_id) {\n    if (typeof L == 'undefined') {\n      setTimeout(() => {\n        this.setCarrierIcon(carrier_id);\n      }, 200);\n      return;\n    }\n    let carrier_icon_url = this.icon_folder + '' + carrier_id + '.png';\n    this.current_icon = shiptimize_utils.isUrlValid(carrier_icon_url) ? this.createIcon(carrier_icon_url) : this.icon_default;\n  }\n\n  /**\n   * Reset all markers  \n   * Select the marker of index idx in map \n   * @param int idx - the index to select \n   */\n  selectMarkerByIdx(idx) {\n    for (let i = 0; i < this.markers.length; ++i) {\n      this.markers[i].setIcon(idx == i ? this.icon_selected : this.current_icon);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./shiptmize.js\n\n\n\n\n\n\n\n/** \n * Class Shiptimize depends on jQuery. \n * Check if we are meant to append a map \n * \n * Platform dependent functions marked with   * @platformDependent \n */\nclass Shiptimize {\n  constructor(ajax_url) {\n    this.markers = []; //pickup {lat, lng} \n    this.isMapLoaded = false;\n    this.gmaps_key = shiptimize_maps_key;\n    this.openMapMarkerIcons = {};\n    this.ajax_url = ajax_url; // platform dependent \n\n    this.platform = new ShiptmizeMagento(this.ajax_url);\n    this.map = shiptimize_maps_key ? new ShiptimizeGmaps(shiptimize_maps_key) : new ShiptimizeOpenMap();\n    this.platform.isCheckout();\n  }\n\n  /** \n   * Show the map to the user \n   */\n  showMap() {\n    this.map.grantReady();\n    this.userScroll = jQuery('html,body').scrollTop();\n    jQuery('html,body').scrollTop(0);\n    jQuery(\".shiptimize-pickup\").addClass(\"active\");\n    this.platform.pickupPoint = {};\n  }\n\n  /** \n   * Hide the map   \n   */\n  hideMap() {\n    jQuery(\".shiptimize-pickup\").removeClass(\"active\");\n    jQuery(\".shiptimize-pickup__error\").hide();\n    jQuery('html,body').scrollTop(this.userScroll);\n  }\n  clearMarkers() {\n    this.map.clearMarkers();\n  }\n\n  /** \n   * Generate the inputs for the user to append extra info if necessary \n   * The id of these fields is in the format shiptimize_extra_{PointId}_{FieldId}\n   */\n  getExtendedInfoHtml(pickupPoint) {\n    if (!pickupPoint.ExtendedInfo || typeof pickupPoint.ExtendedInfo.length == 'undefined') {\n      return \"\";\n    }\n    let html = '';\n    for (let x = 0; pickupPoint.ExtendedInfo && x < pickupPoint.ExtendedInfo.length; ++x) {\n      let extraInfo = pickupPoint.ExtendedInfo[x];\n      html += '<div class=\"shiptimize-pickup__extended\">' + '<label class=\"shiptimize-pickup__extended_label \">' + extraInfo.Tekst + '</label>' + '<input type=\"text\" name=\"shiptimize_pickup_extended_value\" value=\"\" id=\"shiptimize_extra_' + pickupPoint.PointId + '_' + extraInfo.FieldId + '\"/> ' + '<input type=\"hidden\" name=\"shiptimize_pickup_extended_id\" id=\"shiptimize_pickup\" value=\"' + extraInfo.FieldId + '\"/> ' + '</div>';\n    }\n    return html;\n  }\n\n  /**\n   * Reset all markers  \n   * Select the marker of index idx in map \n   */\n  selectPointFromListInMap(idx) {\n    jQuery(\"input[name='shiptimize__point']\").prop('checked', false);\n    this.map.selectMarkerByIdx(idx);\n    jQuery(jQuery(\"input[name='shiptimize__point']\").get(idx)).prop('checked', true);\n  }\n\n  /** \n   * When the user clicks the validate button \n   */\n  selectFromList() {\n    let idx = jQuery(\"input[name='shiptimize__point']:checked\").val();\n    if (!this.pickupPoints || typeof this.pickupPoints[idx] == 'undefined') {\n      console.log(\"Invalid pickup. Did the user click select before selecting a point?\");\n      return;\n    }\n    let pickup = this.pickupPoints[idx];\n    let extra = '';\n    for (let i = 0; pickup.ExtendedInfo && i < pickup.ExtendedInfo.length; ++i) {\n      extra += \"<br/>\" + pickup.ExtendedInfo[i].Tekst + ': ' + jQuery(\"#shiptimize_extra_\" + pickup.PointId + \"_\" + pickup.ExtendedInfo[i].FieldId).val();\n    }\n    jQuery(\".shiptimize-pickup__description\").html(shiptimize_selected_pickup + \" : \" + pickup.Information.Name + \" \" + pickup.Information.Address + \" \" + extra);\n    this.platform.setPickupPoint(pickup);\n    this.hideMap();\n  }\n\n  /** \n   *  Returns the distance between 2 (lat,lng) points in kms \n   */\n  getDistance(latlng, latlng2) {\n    var R = 6371e3; // metres\n    var φ1 = latlng.lat().toRadians();\n    var φ2 = latlng2.lng().toRadians();\n    var Δφ = (latln2.lat() - latlng.lng()).toRadians();\n    var Δλ = (latln2.lng() - latlng.lon()).toRadians();\n    var a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = Math.floor(R * c / 1000);\n  }\n\n  /** \n   * Show the map and query the server for pickup locations near the shipping address provided by the client\n   * center the map on the first point \n   * remove old markers \n   * add the new markers  \n   */\n  getPickupLocations() {\n    this.showMap();\n    let data = this.platform.getShippingData();\n    data.action = 'shiptimize_pickup_locations';\n    this.map.setCarrierIcon(data.CarrierId);\n    this.map.geocode(data, geocode => {\n      this.getPickupLocationsFromGeocodedAddr(geocode, data);\n    });\n  }\n  getPickupLocationsFromGeocodedAddr(geocode, data) {\n    this.resetUI();\n    data.Address.Country = geocode.iso2;\n    data.Address.Long = geocode.lng;\n    data.Address.Lat = geocode.lat;\n    console.log(data);\n    console.log(geocode);\n    jQuery.getJSON(this.ajax_url, data, pickupPoints => {\n      if (pickupPoints.length == 0) {\n        console.log(\"no pickup points found for this address \");\n        return;\n      }\n      console.log(pickupPoints);\n      if (pickupPoints.Error.Id == 0 && pickupPoints.Point.length > 0) {\n        jQuery(\".shiptimize-pickup__options,.shiptimize-pickup__map\").show();\n        this.setPickupLocations(pickupPoints.Point);\n      } else {\n        console.log(\"The api returned an error \", pickupPoints.Error); //pickupPoints.Error.Info || \n        this.pickupError(shiptimize_no_points_found);\n      }\n    });\n  }\n  resetUI() {\n    jQuery(\".shiptimize-pickup__error\").hide();\n    this.map.clearMarkers();\n  }\n\n  /** \n   * @param string info - the message to display \n   */\n  pickupError(info) {\n    this.pickupPoints = [];\n    let eError = jQuery(\".shiptimize-pickup__error\");\n    eError.html(info);\n    eError.show();\n    jQuery(\".shiptimize-pickup__options,.shiptimize-pickup__map\").hide();\n  }\n\n  /** \n   * Append the pickup Locations to the map\n   * @param array pickupPoints - an array of available pickup points \n   */\n  setPickupLocations(pickupPoints) {\n    jQuery(\".shiptimize-pickup__error\").hide();\n    this.pickupPoints = pickupPoints;\n    this.map.clearMarkers();\n    this.map.centerMap(this.pickupPoints[0].Lat, this.pickupPoints[1].Long);\n    this.map.addMarkers(pickupPoints, idx => {\n      this.selectPointFromListInMap(idx);\n    });\n    this.setOptionsForAddress(pickupPoints);\n  }\n\n  /** \n   * @param pickupPoints[] - [] of pickup points returned by the api \n   */\n  setOptionsForAddress(pickupPoints) {\n    let html = '';\n    for (let i = 0; i < pickupPoints.length; ++i) {\n      html += '<div class=\"shiptimize-pickup__point\">' + '<input type=\"radio\" value=\"' + i + '\" name=\"shiptimize__point\"  onclick=\"shiptimize.selectPointFromListInMap(' + i + ')\"/>' + '<span class=\"shiptimize-pickup__point_description\" onclick=\"shiptimize.selectPointFromListInMap(' + i + ')\">' + '<span>' + (pickupPoints[i].Information.Name ? pickupPoints[i].Information.Name + '<br/>' : '') + pickupPoints[i].Information.Address + '</span>' + this.getExtendedInfoHtml(pickupPoints[i]) + '</span>' + '</div>';\n    }\n    console.log(html);\n    jQuery(\".shiptimize-pickup__other\").html(html);\n  }\n  loadMap() {\n    this.map.loadMap();\n  }\n}\nif (typeof jQuery != 'undefined') {\n  jQuery(function () {\n    window.shiptimize = new Shiptimize(shiptimize_ajax_pickup_points);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///450\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[450]();
/******/ 	
/******/ })()
;